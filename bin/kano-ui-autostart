#!/bin/bash

# kano-ui-autostart
#
# Copyright (C) 2014-2017 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#
# This is the Kano version of Lightdm autostart script.
# It is run everytime the kit boots up, and each time a successful Greeter login takes place.
#
# It decides whether to go into Dashboard or Desktop mode via systemd services.
# Switching takes place by restarting systemd services, which makes it happen very fast.
# Look at /usr/lib/systemd/user Kano unit files for more details.
#
# Finally, this script does most of the old kano-uixinit tasks: mouse, keyboard setup,
# disabling screen DPMS, and Kano Tracking.
#
# To switch from either mode from a terminal or ssh session:
#
# $ kano-dashboard-uimode <dashboard | desktop>


# We want systemd to populate the environment to user services
# FIXME: MANAGERPID is not exported, SHLVL=2 instead of 1. why?
export NO_AT_BRIDGE=1

# International keyboard mapping for QT5 apps
# export QT_LOGGING_RULES=qt.qpa.input=true to debug QT5 input drivers
# FIXME: Changing the layout requires a reboot
# FIXME: QT5 support for accent keys is still erratic - vowels show up naked
export XKB_DEFAULT_RULES=evdev
export XKB_DEFAULT_LAYOUT=`setxkbmap -query | grep layout | awk '{print $2}'`

# Tell python modules to use UTF-8 on the console for i18n messages to display accurately.
export PYTHONIOENCODING=UTF-8

#
# Is this the first time we are here directly from a bootup?
#
# FIRST_LOGIN is 1 when we login as a result of a new user being created
# COMING_FROM_BOOT is 1 only when we run for the first time after boot.
# It will switch to 0 when the Xserver is restarted, for example during a logout transition.
#
test -f /run/lock/desktop_init_run
COMING_FROM_BOOT=$?
export COMING_FROM_BOOT
touch /run/lock/desktop_init_run
FIRST_LOGIN=1
export FIRST_LOGIN

# systemd user services will inherit the environment allocated to us
# Xserver authority files amongst other important details
systemctl --user import-environment

# We need the home button service for the loading dialog
systemctl --user start kano-home-button

# If we are in the middle of the Overture Onboarding, quit now.
# This means that the Overture app started the X server in the background
# TODO: Do we want a special wallpaper here? It will be black, as the overture terminal
initflow=`sudo kano-init status`
if [ "$initflow" != "disabled" ]; then

    # Start the boards daemon so we can talk to hardware periherals during Overture
    systemctl --user start kano-boards.service
    systemctl --user start kano-common-notifications.service

    # Nothing more to do now, empty desktop behind the overture app
    exit 0
fi

# This is a standard Xserver login startup, popup the loading message dialog
kano-home-button-visible show_dialog

# We need to do special steps if coming from a bootup
if [ "$COMING_FROM_BOOT" -eq 1 ] ; then

    logger --id --tag "info" "kano-uixinit-systemd first execution"

    # Finalise account setup
    # NB sudo costs us 1 second here, could save it by checking the
    # json file
    sudo kano-init finalise || FIRST_LOGIN=0

    # Report a startup event to Kano Tracker
    kano-tracker-ctl +1 startup &

    # If the kit comes with the Kano Screen Kit, track it
    kano-tracker-ctl generate is_screen_kit &

    if [ "$FIRST_LOGIN" -eq 1 ] ; then
        logger --id --tag "info" "kano-uixinit first boot"
        kano-tracker-ctl generate first-boot &
        sudo kano-updater first-boot &
    fi
fi


# Are we on a RaspberryPI 2 or above?
is_rpi2_or_above=`python -c "from kano.utils.hardware import has_min_performance,\
RPI_2_B_SCORE ; print has_min_performance(RPI_2_B_SCORE)"`


# FIXME: is this still needed?
mkdir -p "$HOME/.kano-settings"

# Track some information about the hardware used
kano-tracker-ctl generate hw-info &

# Disable XServer screen saver time and screen blanking (The display would become black)
if [ -n "`which xset`" ]; then
    xset s off
    xset -dpms
    xset s noblank
fi

# Calibrates the mouse pointer speed
/usr/bin/startmouse


# User environment preparations: mouse speed, keyboard, DPMS, tracking, accelerated x11compositor.

# TODO: move me to a systemd unit service
# Are we in Noobs ? (check for more than 2 partitions)
# If in noobs, make an xrefresh happen after 50 seconds
if [ $( lsblk -n | wc -l ) -gt 3 ] ; then
    (sleep  50; xrefresh ) &
fi

# if xrefresh is still waiting to run, stop it
kill %?xrefresh

# TODO: move me to a systemd unit service
if [ "$FIRST_LOGIN" -eq 1 ]; then

    # regenerating ssh keys only if we find one kano user.
    # we want to have one unique set of host ssh keys per kano kit.
    # getent format: kanousers:x:1000:user1,user2,user3
    if [ `getent group kanousers | awk '{lng=split($0, array, ",")} END{print lng }'` -eq 1 ]; then
	logger --id --tag "info" "kano-ui-autostart regenerating ssh host keys"
	sudo regenerate-ssh-keys &
    fi
fi

# Restore sound volume on boot
if [ -e /lib/systemd/system/alsa-restore.service ]; then
    # Redirect both stderr and stdout to null, we can do our own logging
    sudo systemctl start alsa-restore &> /dev/null
    ret_val="$?"
    if [ "$ret_val" -ne 0 ]; then
        logger --id --tag "warn" "Failed to restore volume level, ret code: $ret_val"
    else
	logger --id --tag "info" "Audio volume level was successfully restored"
    fi
else
    logger --id --tag "warn" "alsa-restore not found, cannott attempt to restore volume level"
fi


# load compositor if the new driver is running
(xdriinfo | grep vc4 ) && xcompmgr &

# Remove Homedir "Desktop" folder created by:
# /usr/share/xsessions/lightdm-xsession.desktop
rm -rf  ~/Desktop


#
# Dashboard Or Desktop mode ?
#

# By default always go to the Dashboard when Lightdm starts (bootup, greeter login)
# Except on Raspberry models below RPi2B, because Dashboard is not supported.
# Switching between both modes goes through systemd units (no lightdm restart).
if [ "$is_rpi2_or_above" == "True" ] ; then
    logger --id --tag "info" "kano-ui-autostart Starting systemd Dashboard mode"
    systemctl --user start kano-dashboard.service
else
    logger --id --tag "info" "kano-ui-autostart Starting systemd Desktop mode"
    kano-home-button-visible hide_dialog
    systemctl --user start kano-desktop.service
fi

# Restart user keep-alive services
# These are running throughout Dashboard and Desktop modes,
# until the user does a logoff or shutdown
systemctl --user restart kano-common.target
